<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>垃圾回報系統</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .header {
            background: rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
            padding: 1rem;
            color: white;
            text-align: center;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        }

        .header h1 {
            font-size: 1.8rem;
            margin-bottom: 0.5rem;
        }

        .header p {
            opacity: 0.9;
            font-size: 1.1rem;
        }

        .controls {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-top: 1rem;
            flex-wrap: wrap;
        }

        .btn {
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid rgba(255, 255, 255, 0.3);
            color: white;
            padding: 0.8rem 1.5rem;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s ease;
            backdrop-filter: blur(5px);
        }

        .btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .btn:disabled:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: none;
        }

        .status-bar {
            background: rgba(0, 0, 0, 0.2);
            padding: 0.5rem;
            text-align: center;
            color: white;
            font-size: 0.9rem;
        }

        .status-bar.error {
            background: rgba(255, 0, 0, 0.3);
        }

        .status-bar.success {
            background: rgba(0, 255, 0, 0.3);
        }

        .main-content {
            flex: 1;
            display: flex;
            padding: 1rem;
            gap: 1rem;
        }

        .map-container {
            flex: 1;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
        }

        #map {
            width: 100%;
            height: 100%;
            min-height: 500px;
        }

        .sidebar {
            width: 350px;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 15px;
            padding: 1rem;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }

        .report-section {
            margin-bottom: 1.5rem;
            padding: 1rem;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
        }

        .report-section h3 {
            color: white;
            margin-bottom: 1rem;
            font-size: 1.2rem;
        }

        .file-input-wrapper {
            position: relative;
            overflow: hidden;
            display: inline-block;
            width: 100%;
        }

        .file-input-wrapper input[type=file] {
            position: absolute;
            left: -9999px;
        }

        .file-input-label {
            display: block;
            padding: 1rem;
            background: rgba(255, 255, 255, 0.2);
            border: 2px dashed rgba(255, 255, 255, 0.5);
            border-radius: 10px;
            color: white;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .file-input-label:hover {
            background: rgba(255, 255, 255, 0.3);
            border-color: rgba(255, 255, 255, 0.7);
        }

        .file-input-label.disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .photo-preview {
            margin-top: 1rem;
            text-align: center;
        }

        .photo-preview img {
            max-width: 100%;
            max-height: 200px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        }

        .category-selection {
            margin-bottom: 1rem;
        }

        .category-selection label {
            color: white;
            display: block;
            margin-bottom: 0.5rem;
        }

        .category-selection select {
            width: 100%;
            padding: 0.5rem;
            border-radius: 5px;
            border: none;
            background: rgba(255, 255, 255, 0.9);
            font-size: 1rem;
        }

        .description-input {
            margin-bottom: 1rem;
        }

        .description-input label {
            color: white;
            display: block;
            margin-bottom: 0.5rem;
        }

        .description-input textarea {
            width: 100%;
            padding: 0.5rem;
            border-radius: 5px;
            border: none;
            background: rgba(255, 255, 255, 0.9);
            resize: vertical;
            min-height: 80px;
            font-family: inherit;
        }

        .location-status {
            background: rgba(255, 255, 255, 0.1);
            padding: 0.5rem;
            border-radius: 5px;
            color: white;
            font-size: 0.9rem;
            margin-bottom: 1rem;
        }

        .location-status.active {
            background: rgba(0, 255, 0, 0.2);
        }

        .location-status.error {
            background: rgba(255, 0, 0, 0.2);
        }

        .report-list {
            margin-top: 1rem;
        }

        .report-list h3 {
            color: white;
            margin-bottom: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .report-item {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 0.8rem;
            margin-bottom: 0.8rem;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            border-left: 4px solid;
        }

        .report-item:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateX(5px);
        }

        .report-item.general { border-left-color: #3498db; }
        .report-item.plastic { border-left-color: #e74c3c; }
        .report-item.organic { border-left-color: #27ae60; }
        .report-item.hazardous { border-left-color: #f39c12; }
        .report-item.large { border-left-color: #9b59b6; }

        .report-item img {
            width: 50px;
            height: 50px;
            border-radius: 5px;
            object-fit: cover;
            margin-right: 0.5rem;
            vertical-align: middle;
        }

        .report-details {
            display: inline-block;
            vertical-align: middle;
        }

        .report-category {
            font-weight: bold;
            font-size: 0.9rem;
        }

        .report-time {
            font-size: 0.8rem;
            opacity: 0.8;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background: rgba(255, 255, 255, 0.95);
            margin: 3% auto;
            padding: 2rem;
            border-radius: 15px;
            width: 90%;
            max-width: 600px;
            position: relative;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
            max-height: 90vh;
            overflow-y: auto;
        }

        .close {
            position: absolute;
            right: 1rem;
            top: 1rem;
            font-size: 2rem;
            cursor: pointer;
            color: #666;
        }

        .close:hover {
            color: #000;
        }

        .modal img {
            max-width: 100%;
            border-radius: 10px;
            margin-bottom: 1rem;
        }

        .leaflet-popup-content-wrapper {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        }

        .popup-image {
            width: 200px;
            height: 150px;
            object-fit: cover;
            border-radius: 5px;
            margin-bottom: 0.5rem;
        }

        .popup-category {
            font-weight: bold;
            color: #e74c3c;
            margin-bottom: 0.5rem;
        }

        .popup-time {
            font-size: 0.9rem;
            color: #666;
            margin-top: 0.5rem;
        }

        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .stat-item {
            background: rgba(255, 255, 255, 0.1);
            padding: 0.5rem;
            border-radius: 5px;
            text-align: center;
            color: white;
        }

        .stat-number {
            font-size: 1.2rem;
            font-weight: bold;
        }

        .stat-label {
            font-size: 0.8rem;
            opacity: 0.8;
        }

        @media (max-width: 768px) {
            .main-content {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                order: -1;
            }
            
            .controls {
                flex-direction: column;
                align-items: center;
            }
            
            .btn {
                width: 200px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>🗑️ 垃圾回報系統</h1>
        <p>協助改善環境品質，回報垃圾問題</p>
        <div class="controls">
            <button class="btn" id="locationBtn" onclick="enableLocationService()">📍 啟用定位服務</button>
            <button class="btn" onclick="showStatistics()">📊 查看統計</button>
            <button class="btn" onclick="showHelp()">❓ 使用說明</button>
        </div>
    </div>

    <div class="status-bar" id="statusBar">
        請先啟用定位服務才能開始回報垃圾
    </div>

    <div class="main-content">
        <div class="map-container">
            <div id="map"></div>
        </div>
        
        <div class="sidebar">
            <div class="report-section">
                <h3>📸 垃圾回報</h3>
                
                <div class="location-status" id="locationStatus">
                    ❌ 位置服務未啟用
                </div>
                
                <div class="category-selection">
                    <label for="categorySelect">垃圾類型：</label>
                    <select id="categorySelect" disabled>
                        <option value="general">一般垃圾</option>
                        <option value="plastic">塑膠垃圾</option>
                        <option value="organic">廚餘垃圾</option>
                        <option value="hazardous">危險廢棄物</option>
                        <option value="large">大型垃圾</option>
                    </select>
                </div>
                
                <div class="description-input">
                    <label for="descriptionText">詳細描述：</label>
                    <textarea id="descriptionText" placeholder="請描述垃圾的狀況、數量等詳細資訊..." disabled></textarea>
                </div>
                
                <div class="file-input-wrapper">
                    <input type="file" id="photoInput" accept="image/*" onchange="handlePhotoUpload(event)" disabled>
                    <label for="photoInput" class="file-input-label disabled" id="photoLabel">
                        請先啟用定位服務
                    </label>
                </div>
                <div class="photo-preview" id="photoPreview"></div>
            </div>
            
            <div class="stats-container" id="statsContainer">
                <div class="stat-item">
                    <div class="stat-number" id="totalReports">0</div>
                    <div class="stat-label">總回報數</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="todayReports">0</div>
                    <div class="stat-label">今日回報</div>
                </div>
            </div>
            
            <div class="report-list">
                <h3>
                    🗑️ 回報記錄
                    <span id="reportCount" style="font-size: 0.9rem; opacity: 0.8;">(0)</span>
                </h3>
                <div id="reportListContainer"></div>
            </div>
        </div>
    </div>

    <!-- 回報詳細資訊彈出視窗 -->
    <div id="reportModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <div id="modalContent"></div>
        </div>
    </div>

    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script>
        let map;
        let userLocation = null;
        let reports = [];
        let reportMarkers = [];
        let locationWatcher = null;
        let isLocationEnabled = false;

        // 垃圾類型配置
        const trashCategories = {
            general: { name: '一般垃圾', color: '#3498db', icon: '🗑️' },
            plastic: { name: '塑膠垃圾', color: '#e74c3c', icon: '🥤' },
            organic: { name: '廚餘垃圾', color: '#27ae60', icon: '🍎' },
            hazardous: { name: '危險廢棄物', color: '#f39c12', icon: '⚠️' },
            large: { name: '大型垃圾', color: '#9b59b6', icon: '🛋️' }
        };

        // 初始化地圖
        function initMap() {
            map = L.map('map').setView([25.0330, 121.5654], 13);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);

            // 禁用點擊直到獲得位置
            map.off('click');
        }

        // 啟用定位服務
        function enableLocationService() {
            if (!navigator.geolocation) {
                updateStatus('您的瀏覽器不支援地理定位服務', 'error');
                return;
            }

            updateStatus('正在請求位置權限...', 'info');
            
            navigator.geolocation.getCurrentPosition(
                function(position) {
                    userLocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    
                    isLocationEnabled = true;
                    enableReportFeatures();
                    updateLocationStatus();
                    
                    map.setView([userLocation.lat, userLocation.lng], 15);
                    
                    // 添加用戶位置標記
                    L.marker([userLocation.lat, userLocation.lng], {
                        icon: L.divIcon({
                            html: '📍',
                            iconSize: [30, 30],
                            className: 'user-location-marker'
                        })
                    }).addTo(map).bindPopup('您的位置');
                    
                    // 啟用地圖點擊事件
                    map.on('click', function(e) {
                        if (isLocationEnabled && document.getElementById('photoInput').files.length > 0) {
                            addReportToLocation(e.latlng);
                        } else if (isLocationEnabled) {
                            alert('請先選擇照片和填寫相關資訊！');
                        }
                    });
                    
                    // 開始監控位置變化
                    startLocationWatcher();
                    
                    updateStatus('位置服務已啟用，可以開始回報垃圾', 'success');
                },
                function(error) {
                    let errorMessage = '無法取得位置：';
                    switch(error.code) {
                        case error.PERMISSION_DENIED:
                            errorMessage += '用戶拒絕了定位請求。請在瀏覽器設定中允許位置存取。';
                            break;
                        case error.POSITION_UNAVAILABLE:
                            errorMessage += '位置資訊不可用。';
                            break;
                        case error.TIMEOUT:
                            errorMessage += '定位請求超時。';
                            break;
                        default:
                            errorMessage += '發生未知錯誤。';
                    }
                    updateStatus(errorMessage, 'error');
                },
                {
                    enableHighAccuracy: true,
                    timeout: 10000,
                    maximumAge: 0
                }
            );
        }

        // 請求位置權限 (保持向後兼容)
        function requestLocation() {
            enableLocationService();
        }

        // 開始監控位置變化
        function startLocationWatcher() {
            if (navigator.geolocation) {
                locationWatcher = navigator.geolocation.watchPosition(
                    function(position) {
                        userLocation = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };
                        updateLocationStatus();
                    },
                    function(error) {
                        console.log('位置監控錯誤:', error);
                    },
                    {
                        enableHighAccuracy: true,
                        timeout: 5000,
                        maximumAge: 30000
                    }
                );
            }
        }

        // 啟用回報功能
        function enableReportFeatures() {
            document.getElementById('photoInput').disabled = false;
            document.getElementById('categorySelect').disabled = false;
            document.getElementById('descriptionText').disabled = false;
            document.getElementById('photoLabel').className = 'file-input-label';
            document.getElementById('photoLabel').textContent = '點擊選擇垃圾照片';
            document.getElementById('locationBtn').textContent = '✅ 定位已啟用';
            document.getElementById('locationBtn').disabled = true;
        }

        // 更新位置狀態
        function updateLocationStatus() {
            const statusElement = document.getElementById('locationStatus');
            if (userLocation) {
                statusElement.innerHTML = `✅ 位置已取得 (${userLocation.lat.toFixed(6)}, ${userLocation.lng.toFixed(6)})`;
                statusElement.className = 'location-status active';
            }
        }

        // 更新狀態欄
        function updateStatus(message, type = 'info') {
            const statusBar = document.getElementById('statusBar');
            statusBar.textContent = message;
            statusBar.className = `status-bar ${type}`;
        }

        // 處理照片上傳
        function handlePhotoUpload(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const preview = document.getElementById('photoPreview');
                    preview.innerHTML = `
                        <img src="${e.target.result}" alt="垃圾照片預覽">
                        <p style="color: white; margin-top: 0.5rem;">照片已選擇，請在地圖上點擊垃圾位置</p>
                    `;
                };
                reader.readAsDataURL(file);
            }
        }

        // 在指定位置添加回報
        function addReportToLocation(latlng) {
            const fileInput = document.getElementById('photoInput');
            const file = fileInput.files[0];
            const category = document.getElementById('categorySelect').value;
            const description = document.getElementById('descriptionText').value;
            
            if (!file) {
                alert('請選擇照片！');
                return;
            }

            if (!description.trim()) {
                alert('請填寫詳細描述！');
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                const report = {
                    id: Date.now(),
                    lat: latlng.lat,
                    lng: latlng.lng,
                    image: e.target.result,
                    category: category,
                    description: description,
                    timestamp: new Date(),
                    filename: file.name,
                    reporterLocation: {
                        lat: userLocation.lat,
                        lng: userLocation.lng
                    }
                };

                reports.push(report);
                addReportMarker(report);
                updateReportList();
                updateStatistics();
                
                // 清除表單
                fileInput.value = '';
                document.getElementById('descriptionText').value = '';
                document.getElementById('photoPreview').innerHTML = '';
                
                updateStatus(`垃圾回報已成功提交！類型：${trashCategories[category].name}`, 'success');
            };
            reader.readAsDataURL(file);
        }

        // 添加回報標記到地圖
        function addReportMarker(report) {
            const category = trashCategories[report.category];
            
            const marker = L.marker([report.lat, report.lng], {
                icon: L.divIcon({
                    html: `<div style="background: ${category.color}; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; font-size: 16px; border: 2px solid white; box-shadow: 0 2px 5px rgba(0,0,0,0.3);">${category.icon}</div>`,
                    iconSize: [30, 30],
                    className: 'trash-marker'
                })
            }).addTo(map).bindPopup(`
                <div>
                    <img src="${report.image}" alt="垃圾照片" class="popup-image">
                    <div class="popup-category">${category.icon} ${category.name}</div>
                    <div><strong>描述：</strong>${report.description}</div>
                    <div class="popup-time">回報時間：${report.timestamp.toLocaleString('zh-TW')}</div>
                </div>
            `);
            
            reportMarkers.push(marker);
        }

        // 更新回報列表
        function updateReportList() {
            const container = document.getElementById('reportListContainer');
            const countElement = document.getElementById('reportCount');
            
            countElement.textContent = `(${reports.length})`;
            
            container.innerHTML = reports.slice().reverse().map(report => {
                const category = trashCategories[report.category];
                return `
                    <div class="report-item ${report.category}" onclick="showReportModal(${report.id})">
                        <img src="${report.image}" alt="垃圾照片">
                        <div class="report-details">
                            <div class="report-category">${category.icon} ${category.name}</div>
                            <div class="report-time">${report.timestamp.toLocaleString('zh-TW')}</div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // 更新統計資料
        function updateStatistics() {
            document.getElementById('totalReports').textContent = reports.length;
            
            const today = new Date().toDateString();
            const todayCount = reports.filter(report => 
                report.timestamp.toDateString() === today
            ).length;
            document.getElementById('todayReports').textContent = todayCount;
        }

        // 顯示回報詳細資訊
        function showReportModal(reportId) {
            const report = reports.find(r => r.id === reportId);
            if (!report) return;

            const category = trashCategories[report.category];
            
            document.getElementById('modalContent').innerHTML = `
                <img src="${report.image}" alt="垃圾照片">
                <h3>${category.icon} ${category.name}</h3>
                <p><strong>詳細描述：</strong></p>
                <p style="background: #f5f5f5; padding: 0.5rem; border-radius: 5px; margin: 0.5rem 0;">${report.description}</p>
                <p><strong>回報時間：</strong>${report.timestamp.toLocaleString('zh-TW')}</p>
                <p><strong>垃圾位置：</strong>${report.lat.toFixed(6)}, ${report.lng.toFixed(6)}</p>
                <p><strong>檔案名稱：</strong>${report.filename}</p>
                <button class="btn" onclick="focusOnReport(${reportId})" style="margin-top: 1rem; background: ${category.color}; color: white; border: none;">
                    在地圖上查看
                </button>
                <div style="margin-top: 1rem; padding: 0.5rem; background: #ffe6e6; border-radius: 5px; font-size: 0.9rem;">
                    ⚠️ 注意：此回報記錄無法刪除，請確保資訊準確
                </div>
            `;
            
            document.getElementById('reportModal').style.display = 'block';
        }

        // 在地圖上聚焦到回報位置
        function focusOnReport(reportId) {
            const report = reports.find(r => r.id === reportId);
            if (report) {
                map.setView([report.lat, report.lng], 16);
                const marker = reportMarkers.find(m => 
                    m.getLatLng().lat === report.lat && 
                    m.getLatLng().lng === report.lng
                );
                if (marker) {
                    marker.openPopup();
                }
                closeModal();
            }
        }

        // 關閉彈出視窗
        function closeModal() {
            document.getElementById('reportModal').style.display = 'none';
        }

        // 顯示統計資料
        function showStatistics() {
            const categoryStats = {};
            reports.forEach(report => {
                categoryStats[report.category] = (categoryStats[report.category] || 0) + 1;
            });

            let statsText = '📊 垃圾回報統計：\n\n';
            statsText += `總回報數：${reports.length}\n`;
            statsText += `今日回報：${reports.filter(r => r.timestamp.toDateString() === new Date().toDateString()).length}\n\n`;
            
            statsText += '各類型垃圾統計：\n';
            Object.entries(categoryStats).forEach(([category, count]) => {
                const categoryInfo = trashCategories[category];
                statsText += `${categoryInfo.icon} ${categoryInfo.name}：${count} 件\n`;
            });

            alert(statsText);
        }

        // 顯示使用說明
        function showHelp() {
            alert(`🗑️ 垃圾回報系統使用說明：

1. 點擊「啟用定位服務」按鈕（必要步驟）
2. 選擇垃圾類型（一般、塑膠、廚餘、危險、大型）
3. 填寫詳細描述（必填）
4. 選擇垃圾照片
5. 在地圖上點擊垃圾的確切位置
6. 系統將自動記錄時間和位置

重要提醒：
• 必須啟用定位服務才能使用
• 所有回報記錄無法刪除
• 請確保照片清晰、位置準確
• 詳細描述有助於清理工作

系統特色：
• 強制位置驗證
• 永久記錄保存
• 分類管理
• 即時統計`);
        }

        // 點擊彈出視窗外部關閉
        window.onclick = function(event) {
            const modal = document.getElementById('reportModal');
            if (event.target === modal) {
                closeModal();
            }
        }

        // 初始化應用
        document.addEventListener('DOMContentLoaded', function() {
            initMap();
            updateStatistics();
        });
